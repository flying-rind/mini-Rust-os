#![no_std]
#![no_main]

#[macro_use]
extern crate user_lib;
use user_syscall::close;
use user_syscall::read;
use user_syscall::write;
use user_syscall::{open, OpenFlags};

#[no_mangle]
fn main() -> i32 {
    let test_str = "Hello, world";
    let filea = "filea";
    let fd = open(filea, OpenFlags::CREATE | OpenFlags::WRONLY);
    assert!(fd.is_some());
    let fd = fd.unwrap();
    write(fd, test_str.as_bytes());
    println!("Write finished successfully!");
    close(fd);

    let fd = open(filea, OpenFlags::RDONLY);
    assert!(fd.is_some());
    let fd = fd.unwrap();
    let mut buffer = [0u8; 100];
    let read_len = read(fd, &mut buffer).unwrap();
    println!("Read finished successfully! Readlen {}", read_len);
    close(fd);

    assert_eq!(test_str, core::str::from_utf8(&buffer[..read_len]).unwrap());
    println!("file_test passed!");
    0
}
